datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {



  id            String    @id @default(cuid())



  name          String?



  email         String?   @unique



  emailVerified DateTime?



  image         String?   // URL to the S3 image



  imageKey      String?   // S3 key for the image



  password      String?



  createdAt     DateTime  @default(now())



  updatedAt     DateTime  @updatedAt



  accounts      Account[]



  sessions      Session[]



  userSessions  UserSession[]



  loginHistory  LoginHistory[]



  verificationToken String? @unique



}







model Account {



  id                String  @id @default(cuid())



  userId            String



  type              String



  provider          String



  providerAccountId String



  refresh_token     String? @db.Text



  access_token      String? @db.Text



  expires_at        Int?



  token_type        String?



  scope             String?



  id_token          String? @db.Text



  session_state     String?







  user User @relation(fields: [userId], references: [id], onDelete: Cascade)







  @@unique([provider, providerAccountId])



}







model Session {



  id           String   @id @default(cuid())



  sessionToken String   @unique



  userId       String



  expires      DateTime



  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)



}







model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])



}



model PasswordResetToken {



  id         String   @id @default(cuid())



  email      String



  token      String   @unique



  expires    DateTime



  createdAt  DateTime @default(now())







  @@unique([email, token])



}



model UserSession {



  id           String    @id @default(cuid())



  userId       String



  deviceInfo   String    // Browser, OS, etc.



  ipAddress    String



  lastActive   DateTime  @default(now())



  isValid      Boolean   @default(true)



  createdAt    DateTime  @default(now())



  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)



}



model LoginHistory {



  id           String    @id @default(cuid())



  userId       String



  ipAddress    String



  deviceInfo   String



  status       String    // success, failed, blocked



  createdAt    DateTime  @default(now())



  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)



}


